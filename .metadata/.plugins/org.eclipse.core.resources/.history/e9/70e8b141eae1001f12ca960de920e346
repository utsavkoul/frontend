package com.example.chatapp.Controller;

import com.example.chatapp.Repository.RoomRepository;
import com.example.chatapp.entities.Message;
import com.example.chatapp.entities.Room;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/v1/rooms")
@CrossOrigin("http://localhost:5173")
public class RoomController {

    @Autowired
    private RoomRepository roomRepository;

    @PostMapping
    public ResponseEntity<?> createRoom(@RequestParam("roomId") String roomId){
        Optional<Room>isdataexist =roomRepository.findByRoomId(roomId);
        if(isdataexist.isPresent()){
            return ResponseEntity.badRequest().body("Room already exists");
        }
        Room room =new Room();
        room.setRoomId(roomId);
        Room savedRoom= roomRepository.save(room);
        return ResponseEntity.status(HttpStatus.CREATED).body(room);
    }
   @GetMapping("/{roomId}")
    public ResponseEntity<?> joinRoom(@PathVariable String roomId){

        Room room = roomRepository.findByRoomId(roomId);
       if (room==null){
           return ResponseEntity.badRequest().body("Room not found");

        }
        return ResponseEntity.ok(room);
    }
    @GetMapping("/{roomId}/messages/")
        public ResponseEntity<List<Message>> getMessages(
        @PathVariable String roomId, @RequestParam(value = "page", defaultValue = "8",required = false) int page, @RequestParam(value="size", defaultValue = "28",required = false) int size
    ){
       Room room = roomRepository.findByRoomId(roomId);
       if (room==null){
           return ResponseEntity.badRequest().build();
       }
       List<Message> messages=room.getMessages();
       int start =Math.max(0, messages.size()-(page+1)*size);
       int end =Math.min(messages.size(), start+size);
        List<Message> paginatedMessages = messages.subList(start, end);
        return ResponseEntity.ok(paginatedMessages);

    }

}
